/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * Sample API
 * OpenAPI spec version: 0.0.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  V1CommentServiceGetRequest,
  V1PostServiceGetRequest,
  V1PostServiceSearchRequest,
} from "../model";
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  V1CommentServiceGetResponse,
  V1PostServiceGetResponse,
  V1PostServiceSearchResponse,
} from "../model";

export const getSampleAPI = () => {
  const commentServiceGet = <
    TData = AxiosResponse<V1CommentServiceGetResponse>,
  >(
    v1CommentServiceGetRequest: V1CommentServiceGetRequest,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(`/v1/comment/get`, v1CommentServiceGetRequest, options);
  };

  const postServiceGet = <TData = AxiosResponse<V1PostServiceGetResponse>>(
    v1PostServiceGetRequest: V1PostServiceGetRequest,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(`/v1/post/get`, v1PostServiceGetRequest, options);
  };

  const postServiceSearch = <
    TData = AxiosResponse<V1PostServiceSearchResponse>,
  >(
    v1PostServiceSearchRequest: V1PostServiceSearchRequest,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(`/v1/post/search`, v1PostServiceSearchRequest, options);
  };

  return { commentServiceGet, postServiceGet, postServiceSearch };
};
export type CommentServiceGetResult =
  AxiosResponse<V1CommentServiceGetResponse>;
export type PostServiceGetResult = AxiosResponse<V1PostServiceGetResponse>;
export type PostServiceSearchResult =
  AxiosResponse<V1PostServiceSearchResponse>;

export const getCommentServiceGetResponseMock = (
  overrideResponse: any = {}
): V1CommentServiceGetResponse => ({
  comment: faker.helpers.arrayElement([faker.word.sample(), undefined]),
  ...overrideResponse,
});

export const getPostServiceGetResponseMock = (
  overrideResponse: any = {}
): V1PostServiceGetResponse => ({
  row: {
    createdAt: faker.word.sample(),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
    title: faker.word.sample(),
    ...overrideResponse,
  },
  ...overrideResponse,
});

export const getPostServiceSearchResponseMock = (
  overrideResponse: any = {}
): V1PostServiceSearchResponse => ({
  rows: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      createdAt: faker.word.sample(),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.word.sample(),
      title: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCommentServiceGetMockHandler = (
  overrideResponse?: V1CommentServiceGetResponse
) => {
  return http.post("*/v1/comment/get", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getCommentServiceGetResponseMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getPostServiceGetMockHandler = (
  overrideResponse?: V1PostServiceGetResponse
) => {
  return http.post("*/v1/post/get", async () => {
    await delay(1000);
    console.log("waaiting");
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getPostServiceGetResponseMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};

export const getPostServiceSearchMockHandler = (
  overrideResponse?: V1PostServiceSearchResponse
) => {
  return http.post("*/v1/post/search", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse ? overrideResponse : getPostServiceSearchResponseMock()
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  });
};
export const getSampleAPIMock = () => [
  getCommentServiceGetMockHandler(),
  getPostServiceGetMockHandler(),
  getPostServiceSearchMockHandler(),
];
